#!/usr/bin/env python3
"""
Auto-Passphrase SSH Authentication
Automatically injects passphrase into SSH without displaying on screen
"""

import subprocess
import tempfile
import os
import sys

def auto_ssh_with_passphrase(passphrase, ssh_command):
    """
    Execute SSH command with automatic passphrase injection
    Passphrase is never displayed on screen
    """
    
    print(f"🔐 AUTO-PASSPHRASE SSH AUTHENTICATION")
    print(f"🚀 Command: {' '.join(ssh_command)}")
    print("🔒 Passphrase will be injected automatically (never displayed)")
    
    # Create temporary askpass script
    with tempfile.NamedTemporaryFile(mode='w', suffix='.sh', delete=False) as f:
        f.write(f'#!/bin/bash\necho "{passphrase}"\n')
        temp_askpass = f.name
    
    os.chmod(temp_askpass, 0o700)
    
    try:
        # Set environment for SSH_ASKPASS
        env = os.environ.copy()
        env['SSH_ASKPASS'] = temp_askpass
        env['DISPLAY'] = ':0'
        env['SSH_ASKPASS_REQUIRE'] = 'force'  # Force use of SSH_ASKPASS
        
        print("✅ Temporary askpass script created")
        print("✅ Environment variables set")
        print("🔑 Executing SSH with automatic passphrase...")
        
        # Execute SSH command with automatic passphrase
        result = subprocess.run(
            ssh_command,
            env=env,
            capture_output=True,
            text=True,
            stdin=subprocess.DEVNULL  # Prevent interactive input
        )
        
        print(f"📤 SSH Exit Code: {result.returncode}")
        
        if result.stdout:
            print("📋 SSH Output:")
            print(result.stdout)
        
        if result.stderr:
            print("📋 SSH Messages:")
            print(result.stderr)
        
        # Clean up
        os.unlink(temp_askpass)
        
        return result.returncode == 0 or (result.returncode == 1 and "successfully authenticated" in result.stderr)
        
    except Exception as e:
        # Clean up temp file
        if os.path.exists(temp_askpass):
            os.unlink(temp_askpass)
        print(f"❌ SSH error: {e}")
        return False

def test_fixed_passphrase():
    """Test with fixed passphrase value"""
    
    print("🧪 TESTING FIXED PASSPHRASE AUTO-INJECTION")
    print("=" * 50)
    
    # Fixed test passphrase
    test_passphrase = "1234"
    
    print(f"🔑 Using fixed passphrase: {'*' * len(test_passphrase)} (never displayed)")
    print("🎯 Testing GitHub SSH authentication...")
    
    # Test SSH command
    ssh_cmd = ['ssh', '-o', 'StrictHostKeyChecking=no', '-T', 'github-zero-nfc-new']
    
    success = auto_ssh_with_passphrase(test_passphrase, ssh_cmd)
    
    if success:
        print("\n🎉 AUTO-PASSPHRASE SSH SUCCESS")
        print("   ✅ Passphrase injected automatically")
        print("   ✅ No passphrase displayed on screen")
        print("   ✅ SSH authentication completed")
    else:
        print("\n❌ AUTO-PASSPHRASE SSH FAILED")
        print("   Check SSH key and passphrase")
    
    return success

def test_nfc_generated_passphrase():
    """Test with NFC-generated passphrase from clipboard"""
    
    print("🧪 TESTING NFC-GENERATED PASSPHRASE AUTO-INJECTION")
    print("=" * 50)
    
    # Get passphrase from clipboard (previously generated by NFC system)
    try:
        result = subprocess.run(['pbpaste'], capture_output=True, text=True)
        clipboard_passphrase = result.stdout.strip()
        
        if not clipboard_passphrase:
            print("❌ No passphrase found in clipboard")
            print("   Run invisible_passphrase_generator.py first")
            return False
        
        print(f"🔑 Using NFC-generated passphrase from clipboard: {'*' * len(clipboard_passphrase)}")
        print("🎯 Testing GitHub SSH authentication...")
        
        # Test SSH command
        ssh_cmd = ['ssh', '-o', 'StrictHostKeyChecking=no', '-T', 'github-zero-nfc-new']
        
        success = auto_ssh_with_passphrase(clipboard_passphrase, ssh_cmd)
        
        if success:
            print("\n🎉 NFC AUTO-PASSPHRASE SSH SUCCESS")
            print("   ✅ NFC-generated passphrase injected automatically")
            print("   ✅ No passphrase displayed on screen")
            print("   ✅ Zero-knowledge authentication completed")
        else:
            print("\n❌ NFC AUTO-PASSPHRASE SSH FAILED")
            print("   Check NFC passphrase generation and SSH key")
        
        return success
        
    except Exception as e:
        print(f"❌ Failed to get passphrase from clipboard: {e}")
        return False

def main():
    """Main auto-passphrase SSH test"""
    
    print("🔐 Auto-Passphrase SSH Authentication System")
    print("🚀 Automatically injects passphrases into SSH without screen display")
    print()
    
    print("📋 AVAILABLE TESTS:")
    print("1. Fixed passphrase test (1234)")
    print("2. NFC-generated passphrase test (from clipboard)")
    print()
    
    choice = input("Select test (1 or 2): ").strip()
    
    if choice == "1":
        test_fixed_passphrase()
    elif choice == "2":
        test_nfc_generated_passphrase()
    else:
        print("❌ Invalid choice")

if __name__ == "__main__":
    main()
